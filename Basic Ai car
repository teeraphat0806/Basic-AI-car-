import pygame
import random
import math
import os

# กำหนดค่าต่าง ๆ
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
GRAY = (128, 128, 128)

SCREEN_WIDTH = 360
SCREEN_HEIGHT = 640
LANE_WIDTH = SCREEN_WIDTH // 4
LANE_POSITIONS = [LANE_WIDTH // 2, LANE_WIDTH * 1.5, LANE_WIDTH * 2.5, LANE_WIDTH * 3.5]

pygame.init()
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('AI Car Simulation on Mobile')
clock = pygame.time.Clock()
font = pygame.font.SysFont(None, 24)

# ฟังก์ชันสำหรับบันทึกและโหลดสถานะการเทรน
def save_training_status(rounds, success_count, failure_count):
    with open("training_status.txt", "w") as file:
        file.write(f"{rounds},{success_count},{failure_count}")

def load_training_status():
    if os.path.exists("training_status.txt"):
        with open("training_status.txt", "r") as file:
            data = file.read().split(',')
            return int(data[0]), int(data[1]), int(data[2])
    else:
        return 0, 0, 0

# คลาส AI Car สำหรับควบคุมการทำงานของ AI
class AICar:
    def __init__(self):
        self.reset()

    def reset(self):
        self.x = LANE_POSITIONS[1]
        self.y = SCREEN_HEIGHT - 100
        self.speed = 5
        self.max_speed = 120
        self.acceleration = 0
        self.angle = 0
        self.target_lane = self.x
        self.sensors = [0] * 8
        self.width = 20
        self.height = 40
        self.lane_index = 1
        self.distance_covered = 0
        self.score = 0
        self.training_progress = []
        self.target_distance = 200
        self.collisions = 0
        self.total_speed = 0
        self.speed_count = 0

    def draw(self):
        rotated_car = pygame.transform.rotate(pygame.Surface((self.width, self.height)), self.angle)
        rotated_car.fill(GREEN)
        screen.blit(rotated_car, (self.x - self.width // 2, self.y - self.height // 2))

    def move(self):
        keys = pygame.key.get_pressed()

        if keys[pygame.K_LEFT] and self.lane_index > 0:
            self.lane_index -= 1
            self.target_lane = LANE_POSITIONS[self.lane_index]
        elif keys[pygame.K_RIGHT] and self.lane_index < len(LANE_POSITIONS) - 1:
            self.lane_index += 1
            self.target_lane = LANE_POSITIONS[self.lane_index]

        if keys[pygame.K_UP]:
            self.acceleration = min(self.acceleration + 0.1, 1)
        if keys[pygame.K_DOWN]:
            self.acceleration = max(self.acceleration - 0.1, -1)

        self.speed = max(5, min(self.speed + self.acceleration, self.max_speed))
        self.distance_covered += (self.speed / 60)
        self.total_speed += self.speed
        self.speed_count += 1

        self.update_lane_position()
        self.check_sensors()

        self.training_progress.append(f"Distance: {self.distance_covered:.2f} km, Speed: {self.speed:.2f} km/h, Acceleration: {self.acceleration:.2f}, Score: {self.score}")
        self.save_progress()

    def update_lane_position(self):
        if self.x < self.target_lane:
            self.x += 2
            self.angle = -15
        elif self.x > self.target_lane:
            self.x -= 2
            self.angle = 15
        else:
            self.angle = 0

    def check_sensors(self):
        is_dangerous = any([random.choice([True, False]) for _ in range(8)])
        if is_dangerous:
            if self.lane_index > 0 and random.choice([True, False]):
                self.lane_index -= 1
                self.target_lane = LANE_POSITIONS[self.lane_index]
            elif self.lane_index < len(LANE_POSITIONS) - 1:
                self.lane_index += 1
                self.target_lane = LANE_POSITIONS[self.lane_index]
            else:
                self.speed = max(self.speed - 1, 5)

    def save_progress(self):
        with open("training_progress.txt", "w") as file:
            for line in self.training_progress:
                file.write(line + "\n")

class BotCar:
    def __init__(self, ai_car):
        self.width = 20
        self.height = 40
        self.x = random.choice(LANE_POSITIONS)
        self.y = random.randint(-SCREEN_HEIGHT, 0)
        self.speed = random.randint(2, 6)
        self.color = random.choice([RED, BLUE, BLACK])
        self.lane_index = LANE_POSITIONS.index(self.x)
        self.target_lane = self.x
        self.angle = 0
        self.lane_changed = 0
        self.max_lane_changes = 1 + int(ai_car.distance_covered / ai_car.target_distance * 3)

    def move(self):
        self.y += self.speed
        if self.y > SCREEN_HEIGHT:
            self.y = random.randint(-SCREEN_HEIGHT, 0)
            self.speed = random.randint(2, 6)
            self.change_lane()
        else:
            self.change_lane_behavior()
        self.update_lane_position()

    def change_lane(self):
        if self.lane_changed < self.max_lane_changes:
            if random.choice([True, False]):
                if self.lane_index > 0 and random.choice([True, False]):
                    self.lane_index -= 1
                elif self.lane_index < len(LANE_POSITIONS) - 1:
                    self.lane_index += 1
                self.target_lane = LANE_POSITIONS[self.lane_index]
                self.lane_changed += 1

    def change_lane_behavior(self):
        if self.lane_changed < self.max_lane_changes and random.randint(0, 100) < 5:
            if self.lane_index > 0 and random.choice([True, False]):
                self.lane_index -= 1
            elif self.lane_index < len(LANE_POSITIONS) - 1:
                self.lane_index += 1
            self.target_lane = LANE_POSITIONS[self.lane_index]
            self.lane_changed += 1

    def update_lane_position(self):
        if self.x < self.target_lane:
            self.x += 2
            self.angle = -15
        elif self.x > self.target_lane:
            self.x -= 2
            self.angle = 15
        else:
            self.angle = 0

    def draw(self):
        rotated_car = pygame.transform.rotate(pygame.Surface((self.width, self.height)), self.angle)
        rotated_car.fill(self.color)
        screen.blit(rotated_car, (self.x - self.width // 2, self.y - self.height // 2))

def check_collision(ai_car, bot_cars):
    ai_rect = pygame.Rect(ai_car.x - ai_car.width // 2, ai_car.y - ai_car.height // 2, ai_car.width, ai_car.height)
    for bot_car in bot_cars:
        bot_rect = pygame.Rect(bot_car.x - bot_car.width // 2, bot_car.y - bot_car.height // 2, bot_car.width, bot_car.height)
        if ai_rect.colliderect(bot_rect):
            return True
    return False

def draw_road():
    pygame.draw.rect(screen, GRAY, [0, 0, SCREEN_WIDTH, SCREEN_HEIGHT])
    for i in range(1, 4):
        pygame.draw.line(screen, WHITE, (LANE_WIDTH * i, 0), (LANE_WIDTH * i, SCREEN_HEIGHT), 2)

def show_progress(car, rounds, success_count, failure_count):
    progress_text = f"Distance: {car.distance_covered:.2f} km / {car.target_distance} km, Speed: {car.speed:.2f} km/h, Acc: {car.acceleration:.2f}, Score: {car.score}, Collisions: {car.collisions}"
    text = font.render(progress_text, True, BLACK)
    screen.blit(text, (10, 10))
    stats_text = f"Rounds: {rounds}, Successes: {success_count}, Failures: {failure_count}"
    stats = font.render(stats_text, True, BLACK)
    screen.blit(stats, (10, 30))

def main():
    ai_car = AICar()
    rounds, success_count, failure_count = load_training_status()
    bot_cars = [BotCar(ai_car) for _ in range(3)]
    running = True

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        screen.fill(WHITE)
        draw_road()

        for bot_car in bot_cars:
            bot_car.move()
            bot_car.draw()

        ai_car.move()
        ai_car.draw()

        if check_collision(ai_car, bot_cars):
            ai_car.collisions += 1
            ai_car.score -= 10
            failure_count += 1
            ai_car.reset()
            rounds += 1
            bot_cars = [BotCar(ai_car) for _ in range(max(3, min(10, success_count + 3)))]

        if ai_car.distance_covered >= ai_car.target_distance:
            success_count += 1
            ai_car.target_distance += 10
            ai_car.reset()
            rounds += 1
            bot_cars = [BotCar(ai_car) for _ in range(max(3, min(10, success_count + 3)))]

        show_progress(ai_car, rounds, success_count, failure_count)

        pygame.display.flip()
        clock.tick(60)

        save_training_status(rounds, success_count, failure_count)

    pygame.quit()

if __name__ == "__main__":
    main()
